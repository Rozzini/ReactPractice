[{"D:\\Project\\ReactPractice\\react-quiz\\src\\App.tsx":"1","D:\\Project\\ReactPractice\\react-quiz\\src\\index.tsx":"2","D:\\Project\\ReactPractice\\react-quiz\\src\\API.ts":"3","D:\\Project\\ReactPractice\\react-quiz\\src\\utils.ts":"4","D:\\Project\\ReactPractice\\react-quiz\\src\\components\\QuestionCard.tsx":"5","D:\\Project\\ReactPractice\\react-quiz\\src\\App.styles.ts":"6"},{"size":2747,"mtime":1608213161142,"results":"7","hashOfConfig":"8"},{"size":197,"mtime":1608197033271,"results":"9","hashOfConfig":"8"},{"size":785,"mtime":1608211138815,"results":"10","hashOfConfig":"8"},{"size":90,"mtime":1608210650770,"results":"11","hashOfConfig":"8"},{"size":1122,"mtime":1608213530706,"results":"12","hashOfConfig":"8"},{"size":1375,"mtime":1608213553298,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"ku90jc",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Project\\ReactPractice\\react-quiz\\src\\App.tsx",["27"],"// types\nimport { Difficulty, QuestionState } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\nimport React, { useState } from 'react';\n\n// Components\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions } from './API';\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n}\n\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\n\tconsole.log(questions);\n\n\n\tconst startTrivia = async () => {\n\t\t\tsetLoading(true);\n\t\t\tsetGameOver(false);\n\n\t\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\t\tTOTAL_QUESTIONS,\n\t\t\t\tDifficulty.MEDIUM\n\t\t\t);\n\n\t\t\tsetQuestions(newQuestions);\n\t\t\tsetScore(0);\n\t\t\tsetUserAnswers([]);\n\t\t\tsetNumber(0);\n\t\t\tsetLoading(false);\n\t}\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n\t\tif (!gameOver){\n\t\t\t// Users answer\n\t\t\tconst answer = e.currentTarget.value;\n\t\t\t// Check answer against correct answer\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\t\t\t// Add score if answer is correct\n\t\t\tif(correct) setScore(prev => prev + 1);\n\t\t\t//save answer in the array for user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers(prev => [...prev, answerObject]);\n\t\t}\n\t}\n\n\tconst nextQuestion = () => {\n\t\t// Move on to next question if not last\n\t\tconst nextQuestion = number + 1;\n\n\t\tif(nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t}\n\t\telse {\n\t\t\tsetNumber(nextQuestion);\n\t\t}\n\t}\n\n  return (\n\t  <>\n\t  <GlobalStyle />\n  <div className=\"App\">\n\t\t<h1> REACT QUIZ</h1>\n\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t<button className=\"start\" onClick={startTrivia}>\n\t\t\tStart\n\t\t</button>\n\t\t) : null}\n\n\n\t\t{!gameOver ? <p className=\"Score\">Score: {score}</p> : null }\n\n\t\t{loading && <p>Loading Questions ...</p>}\n\n\t\t{!loading && !gameOver && (\n\t\t<QuestionCard\n\t\t\tquestionNr={number + 1}\n\t\t\ttotalQuestions= {TOTAL_QUESTIONS}\n\t\t\tquestion={questions[number].question}\n\t\t\tanswers={questions[number].answers}\n\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\tcallback={checkAnswer}\n\t\t/>\n\t\t)}\n\n\t\t{!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\tNext Question\n\t\t</button>\n\t\t) : null}\n\n  </div>\n  </>\n  );\n}\n\nexport default App;\n","D:\\Project\\ReactPractice\\react-quiz\\src\\index.tsx",[],"D:\\Project\\ReactPractice\\react-quiz\\src\\API.ts",[],"D:\\Project\\ReactPractice\\react-quiz\\src\\utils.ts",[],"D:\\Project\\ReactPractice\\react-quiz\\src\\components\\QuestionCard.tsx",[],"D:\\Project\\ReactPractice\\react-quiz\\src\\App.styles.ts",[],{"ruleId":"28","severity":1,"message":"29","line":4,"column":23,"nodeType":"30","messageId":"31","endLine":4,"endColumn":30},"@typescript-eslint/no-unused-vars","'Wrapper' is defined but never used.","Identifier","unusedVar"]